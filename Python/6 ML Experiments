{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1nYxoIXX9ugbD4bsDlCb4Fp_CGztJ_HxX",
      "authorship_tag": "ABX9TyOvTEXGkKwapFv53P0WfFdZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Luke-687/Portfolio/blob/main/TestingML.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "K3It_QntqsHj",
        "outputId": "416c154b-eb2a-4c72-fd21-ee437f5610b0"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'music.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-331b590817d6>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDecisionTreeClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"music.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"genre\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"genre\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'music.csv'"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "df = pd.read_csv(\"music.csv\")\n",
        "X = df.drop(columns = [\"genre\"])\n",
        "y = df[\"genre\"]\n",
        "\n",
        "model = DecisionTreeClassifier()\n",
        "model.fit(X, y)\n",
        "\n",
        "userIn = input(\"Enter an age and gender: \")\n",
        "userIn = userIn.split()\n",
        "if userIn[1] == \"female\":\n",
        "  userIn[1] = 0\n",
        "if userIn[1] == \"male\":\n",
        "  userIn[1] = 1\n",
        "userFix = [int(num) for num in userIn]\n",
        "predictions = model.predict([userFix])\n",
        "predict = predictions[0]\n",
        "print(\"\\nThis person would like \" + predict + \" music\")\n",
        "print(\"\\n\\n\\n\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "df = pd.read_csv(\"large_music_preferences.csv\")\n",
        "df.loc[df[\"Gender\"] == \"Male\", \"Gender\"] = 1\n",
        "df.loc[df[\"Gender\"] == \"Female\", \"Gender\"] = 0\n",
        "df.loc[df[\"Gender\"] == \"Non-Binary\", \"Gender\"] = 2\n",
        "df.loc[df[\"Gender\"] == \"Other\", \"Gender\"] = 3\n",
        "\n",
        "X = df.drop(columns = [\"Music Genre\"])\n",
        "y = df[\"Music Genre\"]\n",
        "\n",
        "model = DecisionTreeClassifier()\n",
        "model.fit(X, y)\n",
        "\n",
        "user = input(\"Input age and gender: \")\n",
        "user = user.split()\n",
        "if user[1] == \"Female\":\n",
        "  user[1] = 0\n",
        "if user[1] == \"Male\":\n",
        "  user[1] = 1\n",
        "if user[1] == \"Non-Binary\":\n",
        "  user[1] = 2\n",
        "if user[1] == \"Other\":\n",
        "  user[1] = 3\n",
        "user = [int(num) for num in user]\n",
        "\n",
        "predictions = model.predict([user])\n",
        "predict = predictions[0]\n",
        "print(\"\\n\\n This person would like \" + predict)\n",
        "print(\"\\n\\n\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBz3LxgL9-7J",
        "outputId": "c1bc9e7c-2df7-45c5-dcc0-dd7b820ae213"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input age and gender: 34 Male\n",
            "\n",
            "\n",
            " This person would like Celtic\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = pd.read_csv(\"synthetic_data.csv\")\n",
        "X = df.drop(columns = \"Purchased\")\n",
        "y = df[\"Purchased\"]\n",
        "\n",
        "model = DecisionTreeClassifier()\n",
        "model.fit(X, y)\n",
        "\n",
        "# userIn = input(\"Enter and age and income (separated by a space): \")\n",
        "# userIn = userIn.split()\n",
        "# userIn = [int[num] for num in userIn]\n",
        "xVal = []\n",
        "yVal = []\n",
        "age = 10\n",
        "income = 10000\n",
        "while age < 90:\n",
        "  income = 10000\n",
        "  while income < 10000000:\n",
        "    predictions = model.predict(pd.DataFrame([[age, income]], columns=X.columns))\n",
        "    prediction = predictions[0]\n",
        "    if prediction == 1:\n",
        "      xVal.append(age)\n",
        "      yVal.append(income)\n",
        "    income = income + 1000\n",
        "  age = age + 1\n",
        "\n",
        "\n",
        "def plot_points(xin, yin):\n",
        "  plt.figure(figsize=(6,8))\n",
        "  plt.scatter(xin, yin, color = \"blue\", marker = \"x\", label=\"Points\")\n",
        "  plt.xlabel(\"Age\")\n",
        "  plt.ylabel(\"Income\")\n",
        "  plt.show\n",
        "\n",
        "plot_points(xVal, yVal)"
      ],
      "metadata": {
        "id": "F2nIq8pEMgzU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "outputId": "957fa225-672f-4d8b-ec02-23e85042b6b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "df1 = pd.read_csv(\"camera_data.csv\")\n",
        "X = df1.drop(columns = \"Price (USD)\")\n",
        "y = df1[\"Price (USD)\"]\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X,y)\n",
        "\n",
        "user = input(\"Enter a MP, GB, and Battery Life: \")\n",
        "user = user.split()\n",
        "user = [float(number) for number in user]\n",
        "predictions = model.predict(pd.DataFrame([user], columns=X.columns))\n",
        "print(\"Cost: \" + str(predictions[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GFxp9SyGNqWv",
        "outputId": "b80ffe60-56e5-40a0-829e-aa4c0981e028"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a MP, GB, and Battery Life: 999 900 40000\n",
            "Cost: 117645.14666832217\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "df = pd.read_csv(\"data.csv\")\n",
        "X = df.drop(columns = \"Price (USD)\")\n",
        "y = df[\"Price (USD)\"]\n",
        "\n",
        "model = DecisionTreeRegressor()\n",
        "model.fit(X, y)\n",
        "\n",
        "user = input(\"Enter a MP, GB, and Battery Life: \")\n",
        "user = user.split()\n",
        "user = [float(number) for number in user]\n",
        "predictions = model.predict(pd.DataFrame([user], columns=X.columns))\n",
        "print(\"Cost: \" + str(predictions[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D9QGD9cETAkx",
        "outputId": "d40eeb3e-1001-41cc-e556-faad384e8a58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a MP, GB, and Battery Life: 1000 670 500\n",
            "Cost: 1373.29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#this code doesnt work at all!\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "df = pd.read_csv(\"oral.csv\")\n",
        "yesNo = df.drop(columns = [\"Gender\", \"ID\", \"Country\", \"Diet (Fruits & Vegetables Intake)\", \"Tumor Size (cm)\", \"Cancer Stage\", \"Treatment Type\", \"Survival Rate (5-Year, %)\", \"Cost of Treatment (USD)\", \"Economic Burden (Lost Workdays per Year)\", \"Early Diagnosis\"])\n",
        "percent = df.drop(columns = [\"Gender\",\"ID\", \"Country\", \"Diet (Fruits & Vegetables Intake)\", \"Tumor Size (cm)\", \"Cancer Stage\", \"Treatment Type\", \"Cost of Treatment (USD)\", \"Economic Burden (Lost Workdays per Year)\", \"Early Diagnosis\", \"Oral Cancer (Diagnosis)\"])\n",
        "yesNo = yesNo.replace(\"No\", 0)\n",
        "percent = percent.replace(\"No\", 0)\n",
        "yesNo = yesNo.replace(\"Yes\", 1)\n",
        "percent = percent.replace(\"Yes\", 1)\n",
        "\n",
        "X1 = yesNnoo.drop(columns = \"Oral Cancer (Diagnosis)\")\n",
        "y1 = yesNo[\"Oral Cancer (Diagnosis)\"]\n",
        "\n",
        "X2 = percent.drop(columns = \"Survival Rate (5-Year, %)\")\n",
        "y2 = percent[\"Survival Rate (5-Year, %)\"]\n",
        "\n",
        "model1 = DecisionTreeClassifier()\n",
        "model1.fit(X1, y1)\n",
        "\n",
        "model2 = LinearRegression()\n",
        "model2.fit(X2, y2)\n",
        "\n",
        "print(\"\\n\\n\\nFill in the following prompts --\")\n",
        "user = []\n",
        "user.append(input(\"\\nAge: \"))\n",
        "user.append(input(\"\\nTobacco User? \"))\n",
        "user.append(input(\"\\nAlcohol Consumption? \"))\n",
        "user.append(input(\"\\nHPV? \"))\n",
        "user.append(input(\"\\nBetel Quid Use? \"))\n",
        "user.append(input(\"\\nChronic Sun Exposure? \"))\n",
        "user.append(input(\"\\nPoor Oral Hygiene? \"))\n",
        "user.append(input(\"\\nFamily History of Cancer? \"))\n",
        "user.append(input(\"\\nComprised Immune System? \"))\n",
        "user.append(input(\"\\nOral Lesions? \"))\n",
        "user.append(input(\"\\nUnexplained Bleeding? \"))\n",
        "user.append(input(\"\\nDifficulty Swallowing? \"))\n",
        "user.append(input(\"\\nWhite or Red patches in Mouth? \"))\n",
        "user = [1 if item == \"Yes\" else 0 if item == \"No\" else item for item in user]\n",
        "user = [1 if item == \"yes\" else 0 if item == \"no\" else item for item in user]\n",
        "\n",
        "predictions1 = model1.predict(pd.DataFrame([user], columns=X1.columns))\n",
        "predict1 = predictions1[0]\n",
        "predictions2 = model2.predict(pd.DataFrame([user], columns=X2.columns))\n",
        "if(predict1 == 1):\n",
        "  print(\"\\nThis person likely has oral cancer, and has a \" + str(predictions2[0]) + \"% chance of survival.\")\n",
        "else:\n",
        "  print(\"\\nThis person likely doesn't have oral cancer.\" + str(predictions2[0]) + \"% chance of survival.\")\n"
      ],
      "metadata": {
        "id": "1-qMhG8OVgh8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05e809a5-532a-4126-e843-d2fd11a46ae8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-ec45d319a0f2>:11: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  yesNo = yesNo.replace(\"Yes\", 1)\n",
            "<ipython-input-2-ec45d319a0f2>:12: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  percent = percent.replace(\"Yes\", 1)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "\n",
            "Fill in the following prompts --\n",
            "\n",
            "Age: 1\n",
            "\n",
            "Tobacco User? no\n",
            "\n",
            "Alcohol Consumption? no\n",
            "\n",
            "HPV? no\n",
            "\n",
            "Betel Quid Use? no\n",
            "\n",
            "Chronic Sun Exposure? no\n",
            "\n",
            "Poor Oral Hygiene? no\n",
            "\n",
            "Family History of Cancer? no\n",
            "\n",
            "Comprised Immune System? no\n",
            "\n",
            "Oral Lesions? no\n",
            "\n",
            "Unexplained Bleeding? no\n",
            "\n",
            "Difficulty Swallowing? no\n",
            "\n",
            "White or Red patches in Mouth? no\n",
            "\n",
            "This person likely has oral cancer, and has a 79.52644305828338% chance of survival.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yes#Plan: Use linear regression to predict the percentage chance it may rain, based on humidity, temperature, and wind of countless past cases in incredibly populated areas\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n"
      ],
      "metadata": {
        "id": "kziw9sfOlK3h"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
